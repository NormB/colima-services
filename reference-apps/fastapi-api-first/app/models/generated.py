# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-10-27T13:18:47+00:00

from __future__ import annotations

from typing import Annotated, Any, Optional, Union

from pydantic import BaseModel, Field


class CacheDeleteResponse(BaseModel):
    """
    Response for cache delete operations
    """

    class Config:
        allow_mutation = False

    key: Annotated[str, Field(description='Cache key', title='Key')]
    deleted: Annotated[
        bool, Field(description='Whether key was deleted', title='Deleted')
    ]
    action: Annotated[
        Optional[str], Field(description='Action performed', title='Action')
    ] = 'delete'


class CacheGetResponse(BaseModel):
    """
    Response for cache get operations
    """

    class Config:
        allow_mutation = False

    key: Annotated[str, Field(description='Cache key', title='Key')]
    value: Annotated[
        Optional[str],
        Field(description='Cached value (null if not found)', title='Value'),
    ] = None
    exists: Annotated[
        bool, Field(description='Whether key exists in cache', title='Exists')
    ]
    ttl: Annotated[
        Optional[Union[int, str]],
        Field(description="Time to live in seconds or 'no expiration'", title='Ttl'),
    ] = None


class CacheSetResponse(BaseModel):
    """
    Response for cache set operations
    """

    class Config:
        allow_mutation = False

    key: Annotated[str, Field(description='Cache key', title='Key')]
    value: Annotated[str, Field(description='Value that was set', title='Value')]
    ttl: Annotated[
        Optional[int],
        Field(
            description='Time to live in seconds (null if no expiration)', title='Ttl'
        ),
    ] = None
    action: Annotated[
        Optional[str], Field(description='Action performed', title='Action')
    ] = 'set'


class MessagePublishResponse(BaseModel):
    """
    Response for message publishing
    """

    class Config:
        allow_mutation = False

    queue: Annotated[str, Field(description='Queue name', title='Queue')]
    message: Annotated[
        dict[str, Any], Field(description='Message that was published', title='Message')
    ]
    action: Annotated[
        Optional[str], Field(description='Action performed', title='Action')
    ] = 'published'


class QueueInfoResponse(BaseModel):
    """
    Response for queue information
    """

    class Config:
        allow_mutation = False

    queue: Annotated[str, Field(description='Queue name', title='Queue')]
    exists: Annotated[bool, Field(description='Whether queue exists', title='Exists')]
    message_count: Annotated[
        Optional[int],
        Field(description='Number of messages in queue', title='Message Count'),
    ] = None
    consumer_count: Annotated[
        Optional[int], Field(description='Number of consumers', title='Consumer Count')
    ] = None


class SecretKeyResponse(BaseModel):
    """
    Response for specific secret key retrieval
    """

    class Config:
        allow_mutation = False

    service: Annotated[str, Field(description='Service name', title='Service')]
    key: Annotated[str, Field(description='Secret key name', title='Key')]
    value: Annotated[
        Optional[str],
        Field(description='Secret value (sensitive values masked)', title='Value'),
    ] = None
    note: Annotated[str, Field(description='Additional information', title='Note')]


class SecretResponse(BaseModel):
    """
    Response for secret retrieval
    """

    class Config:
        allow_mutation = False

    service: Annotated[str, Field(description='Service name', title='Service')]
    data: Annotated[
        dict[str, Any],
        Field(description='Secret data (passwords masked)', title='Data'),
    ]
    note: Annotated[str, Field(description='Additional information', title='Note')]


class ValidationError(BaseModel):
    class Config:
        allow_mutation = False

    loc: Annotated[list[Union[str, int]], Field(title='Location')]
    msg: Annotated[str, Field(title='Message')]
    type: Annotated[str, Field(title='Error Type')]


class HTTPValidationError(BaseModel):
    class Config:
        allow_mutation = False

    detail: Annotated[Optional[list[ValidationError]], Field(title='Detail')] = None
