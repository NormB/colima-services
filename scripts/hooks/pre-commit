#!/usr/bin/env bash
#
# Git pre-commit hook for API synchronization validation.
#
# This hook runs BEFORE each commit to ensure:
# 1. OpenAPI specification is valid YAML
# 2. Both implementations are synchronized (if running)
# 3. No obvious sync violations
#
# This is the PRIMARY enforcement mechanism (CI/CD is just a safety net).
#
# Installation:
#     Run: ./scripts/install-hooks.sh
#     Or manually: ln -sf ../../scripts/hooks/pre-commit .git/hooks/pre-commit
#
# Bypass (use sparingly):
#     git commit --no-verify
#

set -e

# Colors
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

info() { echo -e "${BLUE}[PRE-COMMIT]${NC} $1"; }
success() { echo -e "${GREEN}[PRE-COMMIT]${NC} $1"; }
error() { echo -e "${RED}[PRE-COMMIT]${NC} $1" >&2; }
warn() { echo -e "${YELLOW}[PRE-COMMIT]${NC} $1"; }

# Get project root (2 levels up from .git/hooks)
PROJECT_ROOT="$(cd "$(dirname "$0")/../.." && pwd)"
SHARED_SPEC="${PROJECT_ROOT}/reference-apps/shared/openapi.yaml"

echo ""
info "Running API synchronization checks..."
echo ""

##############################################################################
# Check 1: Validate OpenAPI spec if it's being committed
##############################################################################

if git diff --cached --name-only | grep -q "openapi.yaml"; then
    info "OpenAPI spec is being committed - validating..."

    if command -v yq >/dev/null 2>&1; then
        if yq eval . "$SHARED_SPEC" >/dev/null 2>&1; then
            success "✓ OpenAPI spec is valid YAML"
        else
            error "✗ OpenAPI spec has invalid YAML syntax"
            echo ""
            echo "Fix the spec before committing:"
            echo "  $SHARED_SPEC"
            echo ""
            echo "To bypass this check (NOT recommended):"
            echo "  git commit --no-verify"
            exit 1
        fi
    else
        warn "yq not installed - skipping YAML validation"
        echo "Install: brew install yq"
    fi
fi

##############################################################################
# Check 2: Validate synchronization if APIs are modified
##############################################################################

# Check if any API implementation files are being committed
if git diff --cached --name-only | grep -qE "(fastapi|fastapi-api-first)/app/.*\.py"; then
    info "API implementation files modified - checking synchronization..."

    # Check if both APIs are running
    CODE_FIRST_RUNNING=false
    API_FIRST_RUNNING=false

    if curl -sf "http://localhost:8000/health" >/dev/null 2>&1; then
        CODE_FIRST_RUNNING=true
    fi

    if curl -sf "http://localhost:8001/health" >/dev/null 2>&1; then
        API_FIRST_RUNNING=true
    fi

    # If both are running, validate sync
    if [ "$CODE_FIRST_RUNNING" = true ] && [ "$API_FIRST_RUNNING" = true ]; then
        info "Both APIs are running - validating synchronization..."

        # Run sync check with output capture
        if "${PROJECT_ROOT}/scripts/validate-sync.sh" 2>&1 | tee /tmp/sync-check.log; then
            success "✓ API implementations are synchronized"
        else
            error "✗ API implementations are OUT OF SYNC"
            echo ""
            echo "Synchronization check failed!"
            echo ""
            echo "To fix:"
            echo "  1. Review differences: make sync-report"
            echo "  2. Update shared spec if needed: ./scripts/extract-openapi.sh"
            echo "  3. Regenerate API-first: make regenerate"
            echo "  4. Try commit again"
            echo ""
            echo "To bypass this check (NOT recommended):"
            echo "  git commit --no-verify"
            exit 1
        fi
    else
        warn "Skipping sync check - APIs not running"
        echo ""
        echo "For full validation, start both APIs:"
        echo "  Terminal 1: make start-code-first"
        echo "  Terminal 2: make start-api-first"
        echo "  Then commit again"
        echo ""
        echo "Or run: make validate"
    fi
fi

##############################################################################
# Check 3: Validate router changes match spec
##############################################################################

if git diff --cached --name-only | grep -qE "fastapi/app/routers/.*\.py"; then
    warn "Code-first routers modified"
    echo ""
    echo "After committing, remember to:"
    echo "  1. Extract updated spec: make extract-openapi"
    echo "  2. Update shared spec: edit reference-apps/shared/openapi.yaml"
    echo "  3. Regenerate API-first: make regenerate"
    echo "  4. Validate: make sync-check"
    echo ""
fi

if git diff --cached --name-only | grep -qE "fastapi-api-first/app/routers/.*\.py"; then
    warn "API-first routers modified"
    echo ""
    echo "Manual router changes should be avoided!"
    echo "API-first routers should be generated from OpenAPI spec."
    echo ""
    echo "If you need to add functionality:"
    echo "  1. Update shared OpenAPI spec"
    echo "  2. Regenerate: make regenerate"
    echo ""
fi

##############################################################################
# Success
##############################################################################

echo ""
success "✓ All pre-commit checks passed!"
echo ""

exit 0
